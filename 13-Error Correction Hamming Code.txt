#include <stdio.h>
#include <math.h>

int input[32];
int code[32];
int ham_calc(int, int);

void main() {
    int n, i, p_n = 0, c_l, j, k;

    // Taking input for the length of the Data Word
    printf("Please enter the length of the Data Word: ");
    scanf("%d", &n);
    printf("Please enter the Data Word:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &input[i]);
    }

    // Calculate the number of parity bits required
    i = 0;
    while (n > (int)pow(2, i) - (i + 1)) {
        p_n++;
        i++;
    }

    c_l = p_n + n;

    // Initialize the code array
    j = k = 0;
    for (i = 0; i < c_l; i++) {
        if (i == ((int)pow(2, k) - 1)) {
            code[i] = 0;  // Set parity bit positions to 0
            k++;
        } else {
            code[i] = input[j];
            j++;
        }
    }

    // Calculate the parity bits based on the current data word
    for (i = 0; i < p_n; i++) {
        int position = (int)pow(2, i);
        int value = ham_calc(position, c_l);
        code[position - 1] = value;
    }

    // Output the generated Code Word
    printf("\nThe calculated Code Word is: ");
    for (i = 0; i < c_l; i++)
        printf("%d", code[i]);
    printf("\n");

    // Taking input for the received Code Word
    printf("Please enter the received Code Word:\n");
    for (i = 0; i < c_l; i++) {
        scanf("%d", &code[i]);
    }

    // Calculate the error position
    int error_pos = 0;
    for (i = 0; i < p_n; i++) {
        int position = (int)pow(2, i);
        int value = ham_calc(position, c_l);
        if (value != 0)
            error_pos += position;
    }

    // Check for errors in the received Code Word
    if (error_pos == 0)
        printf("The received Code Word is correct.\n");
    else
        printf("Error at bit position: %d\n", error_pos);
}

int ham_calc(int position, int c_l) {
    int count = 0, i, j;

    // Calculate the parity check for the given position
    i = position - 1;
    while (i < c_l) {
        for (j = i; j < i + position; j++) {
            if (code[j] == 1)
                count++;
        }
        i = i + 2 * position;
    }

    // If the number of 1's in the segment is odd, return 1, else return 0
    if (count % 2 == 0)
        return 0;
    else
        return 1;
}